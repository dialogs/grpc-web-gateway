/*
 * Copyright 2018 dialog LLC <info@dlg.im>
 * @flow
 */

declare class IRequest {
  id: string;
  unary?: UnaryRequestBody;
  push?: PushRequestBody;
  end?: EndRequestBody;
  cancel?: CancelRequestBody;
}

declare type RequestPayload =
  | {
      id: string,
      unary: UnaryRequestBody,
    }
  | {
      id: string,
      push: PushRequestBody,
    }
  | {
      id: string,
      end: EndRequestBody,
    }
  | {
      id: string,
      cancel: CancelRequestBody,
    };

declare class Request extends IRequest {
  static encode(payload: RequestPayload): { finish(): Uint8Array };
  static decode(bytes: Uint8Array): Request;
}

export type UnaryRequestBody = {
  service: string,
  method: string,
  payload: Uint8Array,
  metadata: { [key: string]: string },
};

export type PushRequestBody = {
  payload: Uint8Array,
};

export type EndRequestBody = {};

export type CancelRequestBody = {};

declare class IResponse {
  id: string;
  unary?: UnaryResponseBody;
  push?: PushResponseBody;
  end?: EndResponseBody;
}

declare type ResponsePayload =
  | {
      id: string,
      unary: UnaryResponseBody,
    }
  | { id: string, push: PushResponseBody }
  | { id: string, end: EndResponseBody };

declare class Response extends IResponse {
  static encode(payload: ResponsePayload): { finish(): Uint8Array };
  static decode(bytes: Uint8Array): Response;
}

export type UnaryResponseBody = {
  payload: Uint8Array,
};

export type PushResponseBody = {
  payload: Uint8Array,
};

export type EndResponseBody = {};

module.exports = {
  Request,
  Response,
};
