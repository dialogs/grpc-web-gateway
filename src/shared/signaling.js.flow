/*
 * Copyright 2018 dialog LLC <info@dlg.im>
 * @flow
 */

declare class IRequest {
  id: string;
  unary?: UnaryRequestBody;
  push?: PushRequestBody;
  end?: EndRequestBody;
  cancel?: CancelRequestBody;
}

declare class Request extends IRequest {
  static encode(payload: IRequest): { finish(): Uint8Array };
  static decode(bytes: Uint8Array): Request;
};

export type UnaryRequestBody = {
  service: string;
  method: string;
  payload: Uint8Array;
  metadata: { [key: string]: string };
}

export type PushRequestBody = {
  payload: Uint8Array;
}

export type EndRequestBody = {}

export type CancelRequestBody = {}

declare class IResponse {
  id: string;
  unary?: UnaryResponseBody;
  push?: PushResponseBody;
  end?: EndResponseBody;
}

declare class Response extends IResponse {
  static encode(payload: IResponse): { finish(): Uint8Array };
  static decode(bytes: Uint8Array): Response;
}

export type UnaryResponseBody = {
  payload: Uint8Array;
}

export type PushResponseBody = {
  payload: Uint8Array;
}

export type EndResponseBody = {}

module.exports = {
  Request,
  Response
};
