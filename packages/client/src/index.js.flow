// @flow strict

// Types

declare export class RpcError extends Error {
  code: string;
  constructor(code: string, message: string): RpcError;
}

export type RpcCallStatus = 'initial' | 'open' | 'closed' | 'cancelled';

export type Metadata = { [key: string]: string, ... };

export type UnaryRequest = {
  service: string,
  method: string,
  payload: Uint8Array,
  metadata?: Metadata,
  ...
};

export type PushRequest = {
  payload: Uint8Array,
  metadata?: Metadata,
  ...
};

export type StreamRequest = {
  service: string,
  method: string,
  metadata?: Metadata,
  ...
};

export interface ClientStreamCall extends RpcCall {
  send(PushRequest): void;
  end(): void;
}

// Util types

export interface Logger {
  log(...Array<mixed>): mixed;
  error(...Array<mixed>): mixed;
  info(...Array<mixed>): mixed;
  warn(...Array<mixed>): mixed;
}

export type Sequence = {
  next(): string,
};

// Transport

export type Unbind = () => void;

declare export class TransportError extends Error {
  reason: Error | void;
  constructor(message: string, reason?: Error): TransportError;
}

declare export class HeartbeatError extends HeartbeatError {
  constructor(message: string): HeartbeatError;
}

export type TransportReadyState =
  | 'connecting'
  | 'open'
  | 'suspended'
  | 'closing'
  | 'closed';

export interface Transport {
  close(): void;
  getReadyState(): TransportReadyState;
  ping(): void;
  send(message: Uint8Array): void;

  onClose(handler: () => void): Unbind;
  onError(handler: (error: TransportError) => void): Unbind;
  onMessage(handler: (message: Uint8Array) => void): Unbind;
  onOpen(handler: () => void): Unbind;
  onReadyState(handler: (readyState: TransportReadyState) => void): Unbind;
}

// RPC Calls

export interface RpcCall {
  status: RpcCallStatus;
  cancel(reason?: string): void;
  onMessage(handler: (Uint8Array) => void): Unbind;
  onError(handler: (RpcError) => void): Unbind;
  onEnd(handler: () => void): Unbind;
  onCancel(handler: () => void): Unbind;
}

declare export class UnaryCall implements RpcCall {
  id: string;
  transport: Transport;
  status: RpcCallStatus;

  constructor(id: string, transport: Transport): UnaryCall;

  start(request: UnaryRequest): UnaryCall;
  cancel(reason?: string): void;

  onMessage(handler: (response: Uint8Array) => void): Unbind;
  onError(errorHandler: (error: RpcError) => void): Unbind;
  onEnd(handler: () => void): Unbind;
  onCancel(handler: () => void): Unbind;
}

declare export class BidiStreamCall implements RpcCall {
  id: string;
  transport: Transport;
  status: RpcCallStatus;

  constructor(id: string, transport: Transport): BidiStreamCall;

  start(request: StreamRequest): BidiStreamCall;
  send(request: PushRequest): void;
  end(): void;
  cancel(reason?: string): void;

  onMessage(handler: (response: Uint8Array) => void): Unbind;
  onError(errorHandler: (error: RpcError) => void): Unbind;
  onEnd(handler: () => void): Unbind;
  onCancel(handler: () => void): Unbind;
}

declare export class ServerStreamCall implements RpcCall {
  id: string;
  transport: Transport;
  status: 'initial' | 'open' | 'closed' | 'cancelled';

  constructor(id: string, transport: Transport): ServerStreamCall;

  start(request: UnaryRequest): ServerStreamCall;
  cancel(reason?: string): void;

  onMessage(handler: (response: Uint8Array) => void): Unbind;
  onError(errorHandler: (error: RpcError) => void): Unbind;
  onEnd(handler: () => void): Unbind;
  onCancel(handler: () => void): Unbind;
}

// RpcClient

export interface IRpcClient<UnaryCall, ClientStreamCall> {
  makeUnaryRequest(request: UnaryRequest): UnaryCall;
  makeServerStreamRequest(request: UnaryRequest): UnaryCall;
  makeClientStreamRequest(request: StreamRequest): ClientStreamCall;
  makeBidiStreamRequest(request: StreamRequest): ClientStreamCall;
}

declare export class RpcClient
  implements IRpcClient<RpcCall, ClientStreamCall> {
  transport: Transport;
  calls: Map<string, RpcCall>;
  seq: Sequence;

  constructor(transport: Transport): RpcClient;

  setTransport(transport: Transport): void;
  makeUnaryRequest(request: UnaryRequest): UnaryCall;
  makeServerStreamRequest(request: UnaryRequest): ServerStreamCall;
  makeClientStreamRequest(request: StreamRequest): ClientStreamCall;
  makeBidiStreamRequest(request: StreamRequest): BidiStreamCall;

  onError(errorHandler: (RpcError) => void): void;
}

// Transport implementations

export type IntervalOrProviderFn = number | ((attempt: number) => number);

export type WebSocketTransportConfig = {
  heartbeatInterval?: number,
  suspendedHeartbeatInterval?: IntervalOrProviderFn,
  logger?: Logger,
  debug?: boolean,
  ...
};

declare export class WebSocketTransport implements Transport {
  constructor(
    endpoint: string,
    config?: WebSocketTransportConfig,
  ): WebSocketTransport;

  onOpen(handler: () => void): Unbind;
  onMessage(handler: (message: Uint8Array) => void): Unbind;
  onError(handler: (error: TransportError) => void): Unbind;
  onClose(handler: (void) => void): Unbind;
  onReadyState(handler: (readyState: TransportReadyState) => void): Unbind;

  getReadyState(): TransportReadyState;
  ping(): void;
  send(message: Uint8Array): void;
  close(): void;
}

export type PollingTransportConfig = {
  heartbeatInterval?: number,
  suspendedHeartbeatInterval?: IntervalOrProviderFn,
  logger?: Logger,
  debug?: boolean,
  path?: string,
  ...
};

declare export class PollingTransport implements Transport {
  constructor(
    endpoint: string,
    config?: PollingTransportConfig,
  ): PollingTransport;

  onOpen(handler: () => void): Unbind;
  onMessage(handler: (message: Uint8Array) => void): Unbind;
  onError(handler: (error: TransportError) => void): Unbind;
  onClose(handler: (void) => void): Unbind;
  onReadyState(handler: (readyState: TransportReadyState) => void): Unbind;

  getReadyState(): TransportReadyState;
  ping(): void;
  send(message: Uint8Array): void;
  close(): void;
}
